(()=>{"use strict";var t,a,e=function(){function t(){this.validExt=[],this.fileType=""}return t.prototype.loadAssset=function(t){return a=this,e=void 0,r=function(){return function(t,a){var e,n,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(e=1,n&&(r=2&s[0]?n.return:s[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,s[1])).done)return r;switch(n=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=a.call(t,o)}catch(t){s=[6,t],n=0}finally{e=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}}(this,(function(t){return[2]}))},new((n=void 0)||(n=Promise))((function(t,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(a){var e;a.done?t(a.value):(e=a.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}u((r=r.apply(a,e||[])).next())}));var a,e,n,r},t}(),n=(t=function(a,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,a){t.__proto__=a}||function(t,a){for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e])},t(a,e)},function(a,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=a}t(a,e),a.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=function(){return r=Object.assign||function(t){for(var a,e=1,n=arguments.length;e<n;e++)for(var r in a=arguments[e])Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);return t},r.apply(this,arguments)},i=function(t,a,e,n){return new(e||(e=Promise))((function(r,i){function o(t){try{u(n.next(t))}catch(t){i(t)}}function s(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var a;t.done?r(t.value):(a=t.value,a instanceof e?a:new e((function(t){t(a)}))).then(o,s)}u((n=n.apply(t,a||[])).next())}))},o=function(t,a){var e,n,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(e=1,n&&(r=2&s[0]?n.return:s[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,s[1])).done)return r;switch(n=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=a.call(t,o)}catch(t){s=[6,t],n=0}finally{e=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},s=function(t){function a(){var a=null!==t&&t.apply(this,arguments)||this;return a.validExt=["png","jpg","jpeg","gif"],a.fileType="image",a}return n(a,t),a.prototype.loadAssset=function(t){return i(this,void 0,void 0,(function(){var a,e,n=this;return o(this,(function(i){switch(i.label){case 0:return a=t.url,(e=new Image).src=a,[4,new Promise((function(a){e.onload=function(){u.addLoadedAsset(n,r(r({},t),{data:e})),a(e)}}))];case 1:return i.sent(),[2]}}))}))},a}(e),u=function(){function t(){}return t.addAsset=function(a){var e=t.getLoaderByUrl(a.url);this.assets[e.fileType+":"+a.name]=a},t.getLoaderByUrl=function(a){return t.loaders.filter((function(t){return t.validExt.indexOf(a.split(".").pop())>-1}))[0]},t.registerLoader=function(a){t.loaders.push(a)},t.addLoadedAsset=function(t,a){this.loadedAssets[t.fileType+":"+a.name]=a},t.loadAssets=function(){return i(this,void 0,void 0,(function(){var a;return o(this,(function(e){switch(e.label){case 0:return a=Object.keys(t.assets).map((function(a){if(void 0===t.loadedAssets[a]){var e=t.assets[a];return t.getLoaderByUrl(e.url).loadAssset(e)}})),[4,Promise.all(a)];case 1:return e.sent(),[2]}}))}))},t.getLoadedAsset=function(a){return t.loadedAssets[a]},t.loadedAssets={},t.assets={},t.loaders=[new s],t}(),d=function(){function t(t,a,e,n){this.x=t,this.y=a,this.z=e,this.w=n}return t.prototype.add=function(t,a,e,n){return this.x+=t,this.y+=a,this.z+=e,this.w+=n,this},t.prototype.mul=function(t,a,e,n){return this.x*=t,this.y*=a,this.z*=e,this.w*=n,this},t.prototype.sub=function(t,a,e,n){return this.x-=t,this.y-=a,this.z-=e,this.w-=n,this},t.prototype.div=function(t,a,e,n){return 0==this.x||0==this.y||0==this.z||this.w,this.x/=t,this.y/=a,this.z/=e,this.w/=n,this},t.prototype.addS=function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},t.prototype.subS=function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},t.prototype.divS=function(t){if(0==t)throw new Error("Division by zero");return this.x/=t,this.y/=t,this.z/=t,this.w/=t,this},t.prototype.mulS=function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},t.prototype.normalize=function(){var a=this.length();if(0==a)throw new Error("Length of vector is zero");return new t(this.x/a,this.y/a,this.z/a,this.w/a)},t}(),f=function(){function t(a){var e;this.data=a,null!==(e=this.data)&&void 0!==e||(this.data=t.identity().data)}return t.prototype.mul=function(a){return this.data=t.mul(this,a).data,this},t.prototype.mulVec=function(a){return t.mulVec(this,a)},t.prototype.rotateX=function(a){return this.data=t.mul(this,t.rotateX(a)).data,this},t.prototype.rotateY=function(a){return this.data=t.mul(this,t.rotateY(a)).data,this},t.prototype.rotateZ=function(a){return this.data=t.mul(this,t.rotateZ(a)).data,this},t.prototype.scale=function(a,e,n){return this.data=t.mul(this,t.scale(a,e,n)).data,this},t.prototype.translate=function(a,e,n){return this.data=t.mul(this,t.translate(a,e,n)).data,this},t.prototype.transpose=function(){return t.transpose(this)},t.prototype.copy=function(t){return this.data=t.data,this},t.prototype.clone=function(){return new t(this.data)},t.identity=function(){return new t([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},t.mul=function(a,e){return new t([a.data[0]*e.data[0]+a.data[1]*e.data[4]+a.data[2]*e.data[8]+a.data[3]*e.data[12],a.data[0]*e.data[1]+a.data[1]*e.data[5]+a.data[2]*e.data[9]+a.data[3]*e.data[13],a.data[0]*e.data[2]+a.data[1]*e.data[6]+a.data[2]*e.data[10]+a.data[3]*e.data[14],a.data[0]*e.data[3]+a.data[1]*e.data[7]+a.data[2]*e.data[11]+a.data[3]*e.data[15],a.data[4]*e.data[0]+a.data[5]*e.data[4]+a.data[6]*e.data[8]+a.data[7]*e.data[12],a.data[4]*e.data[1]+a.data[5]*e.data[5]+a.data[6]*e.data[9]+a.data[7]*e.data[13],a.data[4]*e.data[2]+a.data[5]*e.data[6]+a.data[6]*e.data[10]+a.data[7]*e.data[14],a.data[4]*e.data[3]+a.data[5]*e.data[7]+a.data[6]*e.data[11]+a.data[7]*e.data[15],a.data[8]*e.data[0]+a.data[9]*e.data[4]+a.data[10]*e.data[8]+a.data[11]*e.data[12],a.data[8]*e.data[1]+a.data[9]*e.data[5]+a.data[10]*e.data[9]+a.data[11]*e.data[13],a.data[8]*e.data[2]+a.data[9]*e.data[6]+a.data[10]*e.data[10]+a.data[11]*e.data[14],a.data[8]*e.data[3]+a.data[9]*e.data[7]+a.data[10]*e.data[11]+a.data[11]*e.data[15],a.data[12]*e.data[0]+a.data[13]*e.data[4]+a.data[14]*e.data[8]+a.data[15]*e.data[12],a.data[12]*e.data[1]+a.data[13]*e.data[5]+a.data[14]*e.data[9]+a.data[15]*e.data[13],a.data[12]*e.data[2]+a.data[13]*e.data[6]+a.data[14]*e.data[10]+a.data[15]*e.data[14],a.data[12]*e.data[3]+a.data[13]*e.data[7]+a.data[14]*e.data[11]+a.data[15]*e.data[15]])},t.mulVec=function(t,a){return new d(t.data[0]*a.x+t.data[1]*a.y+t.data[2]*a.z+t.data[3]*a.w,t.data[4]*a.x+t.data[5]*a.y+t.data[6]*a.z+t.data[7]*a.w,t.data[8]*a.x+t.data[9]*a.y+t.data[10]*a.z+t.data[11]*a.w,t.data[12]*a.x+t.data[13]*a.y+t.data[14]*a.z+t.data[15]*a.w)},t.rotateX=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([1,0,0,0,0,e,n,0,0,-n,e,0,0,0,0,1])},t.rotateY=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([e,0,-n,0,0,1,0,0,n,0,e,0,0,0,0,1])},t.rotateZ=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([e,n,0,0,-n,e,0,0,0,0,1,0,0,0,0,1])},t.scale=function(a,e,n){return new t([a,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1])},t.translate=function(a,e,n){return new t([1,0,0,0,0,1,0,0,0,0,1,0,a,e,n,1])},t.transpose=function(a){return new t([a.data[0],a.data[4],a.data[8],a.data[12],a.data[1],a.data[5],a.data[9],a.data[13],a.data[2],a.data[6],a.data[10],a.data[14],a.data[3],a.data[7],a.data[11],a.data[15]])},t.perspective=function(a,e,n,r){var i=Math.tan(.5*Math.PI-.5*e),o=1/(n-r);return new t([i/a,0,0,0,0,i,0,0,0,0,(n+r)*o,-1,0,0,2*r*n*o,0])},t.mulMatrixList=function(a){for(var e=t.identity(),n=0,r=a;n<r.length;n++){var i=r[n];e.mul(i)}return e},t}(),c=function(){function t(){}return t.init=function(t,a,e){if(void 0===a&&(a=innerWidth),void 0===e&&(e=innerHeight),t.width=a,t.height=e,this.gl=t.getContext("webgl2"),!this.gl)throw new Error("WebGL not supported")},t}(),h=function(){function t(t,a){var e=c.gl,n=a?a.target:e.ARRAY_BUFFER,r=a?a.usage:e.STATIC_DRAW,i=this.convertData(t.data,t.type),o=e.createBuffer();e.bindBuffer(n,o),e.bufferData(n,i,r),e.bindBuffer(n,null),this.size=t.size,this.type=t.type,this.buffer=o,this.data=t.data}return t.prototype.convertData=function(t,a){switch(a){case"float":return new Float32Array(t);case"float64":return new Float64Array(t);case"int8":return new Int8Array(t);case"int16":return new Int16Array(t);case"int32":return new Int32Array(t);case"uint8":return new Uint8Array(t);case"uint16":return new Uint16Array(t);case"uint32":return new Uint32Array(t)}},t.prototype.destroy=function(){c.gl.deleteBuffer(this.buffer)},t.prototype.bind=function(){var t=c.gl;t.bindBuffer(t.ARRAY_BUFFER,this.buffer)},t.fromJSON=function(a){return new t(a,a.options)},t}(),l=(function(){function t(t,a){var e=c.gl,n=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),null!=a?a:e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.buffer=n,this.data=t}t.prototype.destroy=function(){c.gl.deleteBuffer(this.buffer)},t.prototype.bind=function(){var t=c.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.buffer)},t.fromJson=function(a){return new t(a.data,a.usage)}}(),function(){function t(t,a,e){this.name=t;var n=c.gl,r=n.createProgram();if(this.program=r,n.attachShader(r,a.shader),n.attachShader(r,e.shader),n.linkProgram(r),!n.getProgramParameter(r,n.LINK_STATUS))throw new Error(n.getProgramInfoLog(r));n.useProgram(null)}return t.prototype.deleteProgram=function(){c.gl.deleteProgram(this.program),t.currentProgram=void 0},t.prototype.use=function(){c.gl.useProgram(this.program),t.currentProgram=this},t.prototype.getUniformLocation=function(t){return c.gl.getUniformLocation(this.program,t)},t.prototype.unUse=function(){c.gl.useProgram(null),t.currentProgram=void 0},t}()),p=function(){function t(t,a,e){var n=c.gl,r=n.createShader("vertex"==a?n.VERTEX_SHADER:n.FRAGMENT_SHADER);if(n.shaderSource(r,e),n.compileShader(r),!n.getShaderParameter(r,n.COMPILE_STATUS))throw new Error(n.getShaderInfoLog(r));this.shader=r,this.name=t}return t.prototype.deleteShader=function(){c.gl.deleteShader(this.shader)},t}(),y=function(){function t(t,a){var e=c.gl,n=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),null!=a?a:e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.buffer=n,this.data=t}return t.prototype.destroy=function(){c.gl.deleteBuffer(this.buffer)},t.prototype.bind=function(){var t=c.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.buffer)},t.fromJson=function(a){return new t(a.data,a.usage)},t}(),v=function(){function t(t,a){var e=c.gl.createVertexArray();this.buffers=t,this.vao=e,this.elementBuffer=a}return t.prototype.bindElementBuffer=function(){this.elementBuffer&&(console.log(this.elementBuffer),c.gl,this.elementBuffer.bind())},t.prototype.bindBuffers=function(t){var a=this,e=c.gl;Object.keys(this.buffers).forEach((function(n){var r,i,o,s,u,d,f=e.getAttribLocation(t.program,n),c=a.buffers[n];c.buffer.bind(),a.enablePointer(f,{size:c.buffer.size,type:a.convertType(c.buffer.type),normalized:null!==(i=null===(r=c.options)||void 0===r?void 0:r.normalized)&&void 0!==i&&i,offset:null!==(s=null===(o=c.options)||void 0===o?void 0:o.offset)&&void 0!==s?s:0,stride:null!==(d=null===(u=c.options)||void 0===u?void 0:u.stride)&&void 0!==d?d:0})}))},t.prototype.convertType=function(t){var a=c.gl;switch(t){case"float":case"float64":return a.FLOAT;case"int8":case"int16":case"int32":return a.INT;case"uint8":case"uint16":case"uint32":return a.UNSIGNED_INT}},t.prototype.bind=function(){c.gl.bindVertexArray(this.vao),this.bindElementBuffer(),this.bindBuffers(l.currentProgram)},t.prototype.unBind=function(){c.gl.bindVertexArray(null)},t.prototype.enablePointer=function(t,a){var e=c.gl;e.enableVertexAttribArray(t),e.vertexAttribPointer(t,a.size,a.type,a.normalized,a.stride,a.offset)},t.prototype.draw=function(t){var a,e,n,r;void 0===t&&(t={});var i=c.gl;if(this.elementBuffer)i.drawElements(null!==(a=t.mode)&&void 0!==a?a:i.TRIANGLES,this.elementBuffer.data.length,i.UNSIGNED_SHORT,null!==(e=t.offset)&&void 0!==e?e:0);else{var o=Object.values(this.buffers)[0].buffer,s=o.data.length/o.size;i.drawArrays(null!==(n=t.mode)&&void 0!==n?n:i.TRIANGLES,null!==(r=t.first)&&void 0!==r?r:0,s)}},t.fromJson=function(a){var e={};Object.keys(a.buffers).forEach((function(t){var n=a.buffers[t];e[t]={buffer:h.fromJSON(n.buffer),options:n.options}}));var n=void 0;return a.elementBuffer&&(n=y.fromJson(a.elementBuffer)),new t(e,n)},t}(),m=function(){function t(t,a,e,n){void 0===e&&(e={}),void 0===n&&(n=[]),this.program=t,this.vertexArray=a,this.uniform=e,this.textures=n}return t.prototype.render=function(){var t=this,a=c.gl;a.clearColor(0,0,0,1),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),a.enable(a.DEPTH_TEST),a.enable(a.CULL_FACE),this.program.use(),this.vertexArray.bind(),this.textures.forEach((function(t,a){t.bind(a)})),Object.keys(this.uniform).forEach((function(a){var e=t.uniform[a],n=t.program.getUniformLocation(a);e.use(n)})),this.vertexArray.draw(),this.textures.forEach((function(t,a){t.unBind(a)})),this.vertexArray.unBind(),this.program.unUse()},t}(),b=function(){function t(){var t=c.gl,a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),t.bindTexture(t.TEXTURE_2D,null),this.texture=a}return t.prototype.onLoadImage=function(t){var a=c.gl;function e(t){return 0==(t&t-1)}a.bindTexture(a.TEXTURE_2D,this.texture),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,t),e(t.width)&&e(t.height)?a.generateMipmap(a.TEXTURE_2D):(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR)),a.bindTexture(a.TEXTURE_2D,null)},t.prototype.bind=function(t){var a=c.gl;a.activeTexture(a.TEXTURE0+t),c.gl.bindTexture(a.TEXTURE_2D,this.texture)},t.prototype.unBind=function(t){var a=c.gl;a.activeTexture(a.TEXTURE0+t),a.bindTexture(a.TEXTURE_2D,null)},t.prototype.destroy=function(){c.gl.deleteTexture(this.texture)},t.fromAssets=function(a){var e=new t;return e.onLoadImage(u.getLoadedAsset(a).data),e},t}(),w=function(){function t(t,a){this.x=t,this.y=a}return t.prototype.add=function(t,a){return this.x+=t,this.y+=a,this},t.prototype.sub=function(t,a){return this.x-=t,this.y-=a,this},t.prototype.mul=function(t,a){return this.x*=t,this.y*=a,this},t.prototype.div=function(t,a){if(0===a||0==t)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=a,this},t.prototype.mulS=function(t){return this.x*=t,this.y*=t,this},t.prototype.divS=function(t){if(0===t)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=t,this},t.prototype.addS=function(t){return this.x+=t,this.y+=t,this},t.prototype.subS=function(t){return this.x-=t,this.y-=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.normalize=function(){var a=this.length();if(0===a)throw new Error("Cannot normalize zero vector");return new t(this.x/a,this.y/a)},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this},t}(),g=function(){function t(t){this.data=t}return t.prototype.det=function(){return this.data[2]*this.data[1]-this.data[0]*this.data[3]},t.prototype.mulVec=function(t){return new w(this.data[0]*t.x+this.data[2]*t.y,this.data[1]*t.x+this.data[3]*t.y)},t.prototype.mul=function(a){return this.data=t.mul(this,a).data,this},t.prototype.mulPre=function(a){return this.data=t.mul(a,this).data,this},t.prototype.transpose=function(){return this.data=t.transpose(this).data,this},t.prototype.clone=function(){return new t(this.data)},t.prototype.copy=function(t){return this.data=t.data,this},t.prototype.rotate=function(a){return this.data=t.mul(this,t.rotate(a)).data,this},t.prototype.scale=function(a,e){return this.data=t.mul(this,t.scale(a,e)).data,this},t.prototype.inv=function(){return t.inv(this)},t.identity=function(){return new t([1,0,0,1])},t.mul=function(a,e){return new t([a.data[0]*e.data[0]+a.data[1]*e.data[2],a.data[0]*e.data[1]+a.data[1]*e.data[3],a.data[2]*e.data[0]+a.data[3]*e.data[2],a.data[2]*e.data[1]+a.data[3]*e.data[3]])},t.rotate=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([e,-n,n,e])},t.scale=function(a,e){return new t([a,0,0,e])},t.transpose=function(a){return new t([a.data[0],a.data[2],a.data[1],a.data[3]])},t.inv=function(a){var e=a.det();return new t([a.data[3]/e,-a.data[1]/e,-a.data[2]/e,a.data[0]/e])},t.mulMatrixList=function(a){for(var e=t.identity(),n=0,r=a;n<r.length;n++){var i=r[n];e.mul(i)}return e},t}(),x=function(){function t(t,a,e){this.x=t,this.y=a,this.z=e}return t.prototype.add=function(t,a,e){return this.x+=t,this.y+=a,this.z+=e,this},t.prototype.sub=function(t,a,e){return this.x-=t,this.y-=a,this.z-=e,this},t.prototype.div=function(t,a,e){if(0===a||0===t||0===e)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=a,this.z/=e,this},t.prototype.mul=function(t,a,e){return this.x*=t,this.y*=a,this.z*=e,this},t.prototype.addS=function(t){return this.x+=t,this.y+=t,this.z+=t,this},t.prototype.subS=function(t){return this.x-=t,this.y-=t,this.z-=t,this},t.prototype.mulS=function(t){return this.x*=t,this.y*=t,this.z*=t,this},t.prototype.divS=function(t){if(0===t)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=t,this.z/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},t.prototype.cross=function(a){return new t(this.y*a.z-this.z*a.y,this.z*a.x-this.x*a.z,this.x*a.y-this.y*a.x)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.nomalize=function(){var a=this.length();return 0===a?new t(0,0,0):new t(this.x/a,this.y/a,this.z/a)},t}(),E=function(){function t(a){var e;this.data=a,null!==(e=this.data)&&void 0!==e||(this.data=t.identity().data)}return t.prototype.mul=function(a){return this.data=t.mul(this,a).data,this},t.prototype.mulVec=function(a){return t.mulVec(this,a)},t.prototype.rotateX=function(a){return this.data=t.mul(this,t.rotateX(a)).data,this},t.prototype.rotateY=function(a){return this.data=t.mul(this,t.rotateY(a)).data,this},t.prototype.rotateZ=function(a){return this.data=t.mul(this,t.rotateZ(a)).data,this},t.prototype.scale=function(a,e){return this.data=t.mul(this,t.scale(a,e)).data,this},t.prototype.translate=function(a,e){return this.data=t.mul(this,t.translate(a,e)).data,this},t.prototype.transpose=function(){return this.data=t.transpose(this).data,this},t.prototype.inv=function(){return t.inv(this)},t.prototype.det=function(){return t.det(this)},t.prototype.copy=function(t){return this.data=t.data,this},t.prototype.clone=function(){return new t(this.data)},t.identity=function(){return new t([1,0,0,0,1,0,0,0,1])},t.mul=function(a,e){return new t([a.data[0]*e.data[0]+a.data[1]*e.data[3]+a.data[2]*e.data[6],a.data[0]*e.data[1]+a.data[1]*e.data[4]+a.data[2]*e.data[7],a.data[0]*e.data[2]+a.data[1]*e.data[5]+a.data[2]*e.data[8],a.data[3]*e.data[0]+a.data[4]*e.data[3]+a.data[5]*e.data[6],a.data[3]*e.data[1]+a.data[4]*e.data[4]+a.data[5]*e.data[7],a.data[3]*e.data[2]+a.data[4]*e.data[5]+a.data[5]*e.data[8],a.data[6]*e.data[0]+a.data[7]*e.data[3]+a.data[8]*e.data[6],a.data[6]*e.data[1]+a.data[7]*e.data[4]+a.data[8]*e.data[7],a.data[6]*e.data[2]+a.data[7]*e.data[5]+a.data[8]*e.data[8]])},t.mulVec=function(t,a){return new x(t.data[0]*a.x+t.data[1]*a.y+t.data[2]*a.z,t.data[3]*a.x+t.data[4]*a.y+t.data[5]*a.z,t.data[6]*a.x+t.data[7]*a.y+t.data[8]*a.z)},t.rotateX=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([1,0,0,0,e,-n,0,n,e])},t.rotateY=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([e,0,n,0,1,0,-n,0,e])},t.rotateZ=function(a){var e=Math.cos(a),n=Math.sin(a);return new t([e,-n,0,n,e,0,0,0,1])},t.scale=function(a,e){return new t([a,0,0,0,e,0,0,0,1])},t.translate=function(a,e){return new t([1,0,a,0,1,e,0,0,1])},t.transpose=function(a){return new t([a.data[0],a.data[3],a.data[6],a.data[1],a.data[4],a.data[7],a.data[2],a.data[5],a.data[8]])},t.det=function(t){return t.data[0]*(t.data[5]*t.data[7]-t.data[4]*t.data[8])+-t.data[1]*(t.data[3]*t.data[8]-t.data[5]*t.data[6])+t.data[2]*(t.data[6]*t.data[4]-t.data[3]*t.data[7])},t.inv=function(a){var e=t.det(a);return t.transpose(new t([(a.data[7]*a.data[5]-a.data[4]*a.data[8])/e,-(a.data[6]*a.data[5]-a.data[3]*a.data[8])/e,(a.data[6]*a.data[4]-a.data[3]*a.data[7])/e,-(a.data[7]*a.data[2]-a.data[1]*a.data[8])/e,(a.data[6]*a.data[2]-a.data[0]*a.data[8])/e,-(a.data[6]*a.data[1]-a.data[0]*a.data[7])/e,(a.data[3]*a.data[1]-a.data[0]*a.data[4])/e,-(a.data[3]*a.data[2]-a.data[0]*a.data[5])/e,(a.data[3]*a.data[1]-a.data[0]*a.data[4])/e]))},t.mulMatrixList=function(a){for(var e=t.identity(),n=0,r=a;n<r.length;n++){var i=r[n];e.mul(i)}return e},t}(),T=function(){function t(t,a){this.value=t,this.type=a}return t.prototype.use=function(t){var a=c.gl,e=this.value,n=this.value;switch(this.type){case"float:1":a.uniform1f(t,n);break;case"float:2":a.uniform2f(t,e[0],e[1]);break;case"float:3":a.uniform3f(t,e[0],e[1],e[2]);break;case"float:4":a.uniform4f(t,e[0],e[1],e[2],e[3]);break;case"int:1":a.uniform1i(t,n);break;case"int:2":a.uniform2i(t,e[0],e[1]);break;case"int:3":a.uniform3i(t,e[0],e[1],e[2]);break;case"int:4":a.uniform4i(t,e[0],e[1],e[2],e[3]);break;case"vec:float:1":a.uniform1fv(t,e);break;case"vec:float:2":a.uniform2fv(t,e);break;case"vec:float:3":a.uniform3fv(t,e);break;case"vec:float:4":a.uniform4fv(t,e);break;case"vec:int:1":a.uniform1iv(t,e);break;case"vec:int:2":a.uniform2iv(t,e);break;case"vec:int:3":a.uniform3iv(t,e);break;case"vec:int:4":a.uniform4iv(t,e);break;case"matrix":n instanceof g&&a.uniformMatrix2fv(t,!1,new Float32Array(n.data)),n instanceof E&&a.uniformMatrix3fv(t,!1,new Float32Array(n.data)),n instanceof f&&a.uniformMatrix4fv(t,!1,new Float32Array(n.data));break;case"int":n instanceof w&&a.uniform2iv(t,[n.x,n.y]),n instanceof x&&a.uniform3iv(t,[n.x,n.y,n.z]),n instanceof d&&a.uniform4iv(t,[n.x,n.y,n.z,n.w]);break;case"float":n instanceof w&&a.uniform2fv(t,[n.x,n.y]),n instanceof x&&a.uniform3fv(t,[n.x,n.y,n.z]),n instanceof d&&a.uniform4fv(t,[n.x,n.y,n.z,n.w])}},t}(),A=function(){function t(t,a){var e,n,r,i,o,s,u,d;this.tag=null!==(e=null==a?void 0:a.tag)&&void 0!==e?e:t.tagName,this.classList=null!==(n=null==a?void 0:a.classList)&&void 0!==n?n:Array.from(t.classList),this.className=null!==(r=null==a?void 0:a.className)&&void 0!==r?r:t.className,this.id=null!==(i=null==a?void 0:a.id)&&void 0!==i?i:t.id,this.events=null!==(o=null==a?void 0:a.events)&&void 0!==o?o:{},this.attributes=null!==(s=null==a?void 0:a.attributes)&&void 0!==s?s:{},this.styles=null!==(u=null==a?void 0:a.styles)&&void 0!==u?u:{},this.element=t,this.childs=null!==(d=null==a?void 0:a.childs)&&void 0!==d?d:[]}return t.prototype.removeStyle=function(t){delete this.styles[t],this.element.style.removeProperty(t)},t.prototype.addStyle=function(t,a){var e=this;Object.keys(t).forEach((function(a){e.element.setAttribute(a,t[a]),e.styles[a]=t[a]}))},t.prototype.addAttribute=function(t,a){this.attributes[t]=a,this.element.setAttribute(t,a)},t.prototype.removeAttribute=function(t){delete this.attributes[t],this.element.removeAttribute(t)},t}(),_=function(){return _=Object.assign||function(t){for(var a,e=1,n=arguments.length;e<n;e++)for(var r in a=arguments[e])Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);return t},_.apply(this,arguments)};(function t(a,e,n){if("string"==typeof a)return a.startsWith("class:")?function(t){for(var a=document.getElementsByClassName(t),e=[],n=0;n<a.length;n++){var r=a[n];e.push(new A(r))}return e}(a.replace("class:","")):function(a,e){var n=document.getElementById(a);return e?t(e,void 0,n):new A(n)}(a.replace("id:",""),e);if(a instanceof HTMLElement)return t(e,void 0,a);var r=null!=n?n:document.createElement(a.tag||"div");!function(t,a){t.className&&(a.className=t.className)}(a,r),function(t,a){t.id&&(a.id=t.id)}(a,r),function(t,a){null!=t.events&&Object.keys(t.events).forEach((function(e){var n=t.events[e];a.addEventListener(e,n)}))}(a,r),function(t,a){t.attributes&&Object.keys(t.attributes).forEach((function(e){a.setAttribute(e,t.attributes[e])}))}(a,r),function(t,a){t.styles&&Object.keys(t.styles).forEach((function(e){a.style.setProperty(e.replace("$$","-"),t.styles[e])}))}(a,r),function(t,a){t.innerHTML&&(a.innerHTML=t.innerHTML)}(a,r);var i=function(a,e){if(a.childs){var n=[];return a.childs.forEach((function(a){if(a instanceof HTMLElement)return e.appendChild(a),void n.push(new A(a));if("string"!=typeof a){if(a instanceof A)e.appendChild(a.element);else if("object"==typeof a){var r=t(a);return n.push(r),void e.appendChild(r.element)}}else e.innerHTML+=a})),n}}(a,r),o=new A(r,_(_({},a),{childs:i}));return a.ref&&a.ref(o),o})("id:root",{styles:{padding:0,margin:0,width:"100vw",height:"100vh",display:"flex"},childs:[{tag:"canvas",ref:function(t){a=t}}]}),c.init(a.element);var R=new p("default","vertex","#version 300 es\n  in vec4 a_position;\n  in vec2 a_texcoord;\n  out vec2 v_texcoord;\n\n  uniform mat4 u_projection;\n  uniform mat4 u_model;\n\n  void main(){\n    gl_Position = u_projection * u_model * a_position;\n    v_texcoord = a_texcoord;\n  }\n"),z=new p("default","fragment","#version 300 es\n  precision highp float;\n  in vec2 v_texcoord;\n  out vec4 outColor;\n  uniform sampler2D u_texture;\n  void main(){\n    outColor = texture(u_texture, v_texcoord);\n  }\n");c.gl.canvas.width=innerWidth,c.gl.canvas.height=innerHeight;var B=new l("default",R,z),L=v.fromJson({buffers:{a_position:{buffer:{data:[-.5,-.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,-.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,.5,.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,-.5,.5],type:"float",size:3}},a_texcoord:{buffer:{data:[1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0],type:"float",size:2}}},elementBuffer:{data:[0,1,2,3,0,2,6,5,4,6,4,7,10,9,8,11,10,8,12,13,14,12,14,15,16,18,17,16,19,18,20,22,21,22,20,23]}});u.addAsset({name:"pokemon",url:"./assets/pokemon.png"}),u.addAsset({name:"digimon",url:"./assets/digimon.jpg"}),u.loadAssets().then((function(){new m(B,L,{u_projection:new T(f.perspective(c.gl.canvas.width/c.gl.canvas.height,Math.PI/4,1,100),"matrix"),u_model:new T(f.rotateX(Math.PI/2).translate(0,0,-5),"matrix")},[b.fromAssets("image:digimon")]).render()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,