(()=>{"use strict";var t,a=function(){function t(){this.validExt=[],this.fileType=""}return t.prototype.loadAssset=function(t){return a=this,n=void 0,r=function(){return function(t,a){var n,e,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(n=1,e&&(r=2&s[0]?e.return:s[0]?e.throw||((r=e.return)&&r.call(e),0):e.next)&&!(r=r.call(e,s[1])).done)return r;switch(e=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,e=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=a.call(t,o)}catch(t){s=[6,t],e=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}}(this,(function(t){return[2]}))},new((e=void 0)||(e=Promise))((function(t,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(a){var n;a.done?t(a.value):(n=a.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,s)}u((r=r.apply(a,n||[])).next())}));var a,n,e,r},t}(),n=(t=function(a,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,a){t.__proto__=a}||function(t,a){for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])},t(a,n)},function(a,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=a}t(a,n),a.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),e=function(){return e=Object.assign||function(t){for(var a,n=1,e=arguments.length;n<e;n++)for(var r in a=arguments[n])Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);return t},e.apply(this,arguments)},r=function(t,a,n,e){return new(n||(n=Promise))((function(r,i){function o(t){try{u(e.next(t))}catch(t){i(t)}}function s(t){try{u(e.throw(t))}catch(t){i(t)}}function u(t){var a;t.done?r(t.value):(a=t.value,a instanceof n?a:new n((function(t){t(a)}))).then(o,s)}u((e=e.apply(t,a||[])).next())}))},i=function(t,a){var n,e,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(n=1,e&&(r=2&s[0]?e.return:s[0]?e.throw||((r=e.return)&&r.call(e),0):e.next)&&!(r=r.call(e,s[1])).done)return r;switch(e=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,e=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=a.call(t,o)}catch(t){s=[6,t],e=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},o=function(t){function a(){var a=null!==t&&t.apply(this,arguments)||this;return a.validExt=["png","jpg","jpeg","gif"],a.fileType="image",a}return n(a,t),a.prototype.loadAssset=function(t){return r(this,void 0,void 0,(function(){var a,n,r=this;return i(this,(function(i){switch(i.label){case 0:return a=t.url,(n=new Image).src=a,[4,new Promise((function(a){n.onload=function(){s.addLoadedAsset(r,e(e({},t),{data:n})),a(n)}}))];case 1:return i.sent(),[2]}}))}))},a}(a),s=function(){function t(){}return t.addAsset=function(a){var n=t.getLoaderByUrl(a.url);this.assets[n.fileType+":"+a.name]=a},t.getLoaderByUrl=function(a){return t.loaders.filter((function(t){return t.validExt.indexOf(a.split(".").pop())>-1}))[0]},t.registerLoader=function(a){t.loaders.push(a)},t.addLoadedAsset=function(t,a){this.loadedAssets[t.fileType+":"+a.name]=a},t.loadAssets=function(){return r(this,void 0,void 0,(function(){var a;return i(this,(function(n){switch(n.label){case 0:return a=Object.keys(t.assets).map((function(a){if(void 0===t.loadedAssets[a]){var n=t.assets[a];return t.getLoaderByUrl(n.url).loadAssset(n)}})),[4,Promise.all(a)];case 1:return n.sent(),[2]}}))}))},t.getLoadedAsset=function(a){return t.loadedAssets[a]},t.loadedAssets={},t.assets={},t.loaders=[new o],t}(),u=function(){function t(t,a,n,e){this.x=t,this.y=a,this.z=n,this.w=e}return t.prototype.add=function(t,a,n,e){return this.x+=t,this.y+=a,this.z+=n,this.w+=e,this},t.prototype.mul=function(t,a,n,e){return this.x*=t,this.y*=a,this.z*=n,this.w*=e,this},t.prototype.sub=function(t,a,n,e){return this.x-=t,this.y-=a,this.z-=n,this.w-=e,this},t.prototype.div=function(t,a,n,e){return 0==this.x||0==this.y||0==this.z||this.w,this.x/=t,this.y/=a,this.z/=n,this.w/=e,this},t.prototype.addS=function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},t.prototype.subS=function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},t.prototype.divS=function(t){if(0==t)throw new Error("Division by zero");return this.x/=t,this.y/=t,this.z/=t,this.w/=t,this},t.prototype.mulS=function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},t.prototype.normalize=function(){var a=this.length();if(0==a)throw new Error("Length of vector is zero");return new t(this.x/a,this.y/a,this.z/a,this.w/a)},t}(),d=function(){function t(a){var n;this.data=a,null!==(n=this.data)&&void 0!==n||(this.data=t.identity().data)}return t.prototype.mul=function(a){return this.data=t.mul(this,a).data,this},t.prototype.mulVec=function(a){return t.mulVec(this,a)},t.prototype.rotateX=function(a){return this.data=t.mul(this,t.rotateX(a)).data,this},t.prototype.rotateY=function(a){return this.data=t.mul(this,t.rotateY(a)).data,this},t.prototype.rotateZ=function(a){return this.data=t.mul(this,t.rotateZ(a)).data,this},t.prototype.scale=function(a,n,e){return this.data=t.mul(this,t.scale(a,n,e)).data,this},t.prototype.translate=function(a,n,e){return this.data=t.mul(this,t.translate(a,n,e)).data,this},t.prototype.transpose=function(){return t.transpose(this)},t.prototype.copy=function(t){return this.data=t.data,this},t.prototype.clone=function(){return new t(this.data)},t.identity=function(){return new t([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},t.mul=function(a,n){return new t([a.data[0]*n.data[0]+a.data[1]*n.data[4]+a.data[2]*n.data[8]+a.data[3]*n.data[12],a.data[0]*n.data[1]+a.data[1]*n.data[5]+a.data[2]*n.data[9]+a.data[3]*n.data[13],a.data[0]*n.data[2]+a.data[1]*n.data[6]+a.data[2]*n.data[10]+a.data[3]*n.data[14],a.data[0]*n.data[3]+a.data[1]*n.data[7]+a.data[2]*n.data[11]+a.data[3]*n.data[15],a.data[4]*n.data[0]+a.data[5]*n.data[4]+a.data[6]*n.data[8]+a.data[7]*n.data[12],a.data[4]*n.data[1]+a.data[5]*n.data[5]+a.data[6]*n.data[9]+a.data[7]*n.data[13],a.data[4]*n.data[2]+a.data[5]*n.data[6]+a.data[6]*n.data[10]+a.data[7]*n.data[14],a.data[4]*n.data[3]+a.data[5]*n.data[7]+a.data[6]*n.data[11]+a.data[7]*n.data[15],a.data[8]*n.data[0]+a.data[9]*n.data[4]+a.data[10]*n.data[8]+a.data[11]*n.data[12],a.data[8]*n.data[1]+a.data[9]*n.data[5]+a.data[10]*n.data[9]+a.data[11]*n.data[13],a.data[8]*n.data[2]+a.data[9]*n.data[6]+a.data[10]*n.data[10]+a.data[11]*n.data[14],a.data[8]*n.data[3]+a.data[9]*n.data[7]+a.data[10]*n.data[11]+a.data[11]*n.data[15],a.data[12]*n.data[0]+a.data[13]*n.data[4]+a.data[14]*n.data[8]+a.data[15]*n.data[12],a.data[12]*n.data[1]+a.data[13]*n.data[5]+a.data[14]*n.data[9]+a.data[15]*n.data[13],a.data[12]*n.data[2]+a.data[13]*n.data[6]+a.data[14]*n.data[10]+a.data[15]*n.data[14],a.data[12]*n.data[3]+a.data[13]*n.data[7]+a.data[14]*n.data[11]+a.data[15]*n.data[15]])},t.mulVec=function(t,a){return new u(t.data[0]*a.x+t.data[1]*a.y+t.data[2]*a.z+t.data[3]*a.w,t.data[4]*a.x+t.data[5]*a.y+t.data[6]*a.z+t.data[7]*a.w,t.data[8]*a.x+t.data[9]*a.y+t.data[10]*a.z+t.data[11]*a.w,t.data[12]*a.x+t.data[13]*a.y+t.data[14]*a.z+t.data[15]*a.w)},t.rotateX=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([1,0,0,0,0,n,e,0,0,-e,n,0,0,0,0,1])},t.rotateY=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([n,0,-e,0,0,1,0,0,e,0,n,0,0,0,0,1])},t.rotateZ=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([n,e,0,0,-e,n,0,0,0,0,1,0,0,0,0,1])},t.scale=function(a,n,e){return new t([a,0,0,0,0,n,0,0,0,0,e,0,0,0,0,1])},t.translate=function(a,n,e){return new t([1,0,0,0,0,1,0,0,0,0,1,0,a,n,e,1])},t.transpose=function(a){return new t([a.data[0],a.data[4],a.data[8],a.data[12],a.data[1],a.data[5],a.data[9],a.data[13],a.data[2],a.data[6],a.data[10],a.data[14],a.data[3],a.data[7],a.data[11],a.data[15]])},t.perspective=function(a,n,e,r){var i=Math.tan(.5*Math.PI-.5*n),o=1/(e-r);return new t([i/a,0,0,0,0,i,0,0,0,0,(e+r)*o,-1,0,0,2*r*e*o,0])},t.mulMatrixList=function(a){for(var n=t.identity(),e=0,r=a;e<r.length;e++){var i=r[e];n.mul(i)}return n},t}(),c=function(){function t(t,a,n){this.x=t,this.y=a,this.z=n}return t.prototype.add=function(t,a,n){return this.x+=t,this.y+=a,this.z+=n,this},t.prototype.sub=function(t,a,n){return this.x-=t,this.y-=a,this.z-=n,this},t.prototype.div=function(t,a,n){if(0===a||0===t||0===n)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=a,this.z/=n,this},t.prototype.mul=function(t,a,n){return this.x*=t,this.y*=a,this.z*=n,this},t.prototype.addS=function(t){return this.x+=t,this.y+=t,this.z+=t,this},t.prototype.subS=function(t){return this.x-=t,this.y-=t,this.z-=t,this},t.prototype.mulS=function(t){return this.x*=t,this.y*=t,this.z*=t,this},t.prototype.divS=function(t){if(0===t)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=t,this.z/=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},t.prototype.cross=function(a){return new t(this.y*a.z-this.z*a.y,this.z*a.x-this.x*a.z,this.x*a.y-this.y*a.x)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.nomalize=function(){var a=this.length();return 0===a?new t(0,0,0):new t(this.x/a,this.y/a,this.z/a)},t}(),f=function(){function t(t,a){var n,e,r,i,o,s,u,d;this.tag=null!==(n=null==a?void 0:a.tag)&&void 0!==n?n:t.tagName,this.classList=null!==(e=null==a?void 0:a.classList)&&void 0!==e?e:Array.from(t.classList),this.className=null!==(r=null==a?void 0:a.className)&&void 0!==r?r:t.className,this.id=null!==(i=null==a?void 0:a.id)&&void 0!==i?i:t.id,this.events=null!==(o=null==a?void 0:a.events)&&void 0!==o?o:{},this.attributes=null!==(s=null==a?void 0:a.attributes)&&void 0!==s?s:{},this.styles=null!==(u=null==a?void 0:a.styles)&&void 0!==u?u:{},this.element=t,this.childs=null!==(d=null==a?void 0:a.childs)&&void 0!==d?d:[]}return t.prototype.removeStyle=function(t){delete this.styles[t],this.element.style.removeProperty(t)},t.prototype.addStyle=function(t,a){var n=this;Object.keys(t).forEach((function(a){n.element.setAttribute(a,t[a]),n.styles[a]=t[a]}))},t.prototype.addAttribute=function(t,a){this.attributes[t]=a,this.element.setAttribute(t,a)},t.prototype.removeAttribute=function(t){delete this.attributes[t],this.element.removeAttribute(t)},t}(),l=function(){return l=Object.assign||function(t){for(var a,n=1,e=arguments.length;n<e;n++)for(var r in a=arguments[n])Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);return t},l.apply(this,arguments)};var h=function(){function t(){}return t.init=function(t,a,n){if(void 0===a&&(a=innerWidth),void 0===n&&(n=innerHeight),t.width=a,t.height=n,this.gl=t.getContext("webgl2"),!this.gl)throw new Error("WebGL not supported")},t}(),p=function(){function t(t){var a,n,e=h.gl,r=function(t,a){switch(a){case"float":return new Float32Array(t);case"float64":return new Float64Array(t);case"int8":return new Int8Array(t);case"int16":return new Int16Array(t);case"int32":return new Int32Array(t);case"uint8":return new Uint8Array(t);case"uint16":return new Uint16Array(t);case"uint32":return new Uint32Array(t)}}(t.data,t.type),i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,r,null!==(n=null===(a=t.options)||void 0===a?void 0:a.usage)&&void 0!==n?n:e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.size=t.size,this.type=t.type,this.buffer=i,this.data=t.data}return t.prototype.destroy=function(){h.gl.deleteBuffer(this.buffer)},t.prototype.bind=function(){var t=h.gl;t.bindBuffer(t.ARRAY_BUFFER,this.buffer)},t}(),y=function(){function t(t,a){var n=h.gl,e=n.createBuffer();n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e),n.bufferData(n.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),null!=a?a:n.STATIC_DRAW),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null),this.buffer=e,this.data=t}return t.prototype.destroy=function(){h.gl.deleteBuffer(this.buffer)},t.prototype.bind=function(){var t=h.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.buffer)},t.fromJson=function(a){return new t(a.data,a.usage)},t}(),v=function(){function t(t,a,n){this.name=t;var e=h.gl,r=e.createProgram();if(this.program=r,e.attachShader(r,a.shader),e.attachShader(r,n.shader),e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS))throw new Error(e.getProgramInfoLog(r));e.useProgram(null)}return t.prototype.deleteProgram=function(){h.gl.deleteProgram(this.program),t.currentProgram=void 0},t.prototype.use=function(){h.gl.useProgram(this.program),t.currentProgram=this},t.prototype.getUniformLocation=function(t){return h.gl.getUniformLocation(this.program,t)},t.prototype.useUniforms=function(t){var a=this;Object.keys(t).forEach((function(n){var e=t[n],r=a.getUniformLocation(n);e.use(r)}))},t.prototype.unUse=function(){h.gl.useProgram(null),t.currentProgram=void 0},t}(),m=function(){function t(t,a,n){var e=h.gl,r=e.createShader("vertex"==a?e.VERTEX_SHADER:e.FRAGMENT_SHADER);if(e.shaderSource(r,n),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(r));this.shader=r,this.name=t}return t.prototype.deleteShader=function(){h.gl.deleteShader(this.shader)},t}(),w=function(){function t(t,a){this.x=t,this.y=a}return t.prototype.add=function(t,a){return this.x+=t,this.y+=a,this},t.prototype.sub=function(t,a){return this.x-=t,this.y-=a,this},t.prototype.mul=function(t,a){return this.x*=t,this.y*=a,this},t.prototype.div=function(t,a){if(0===a||0==t)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=a,this},t.prototype.mulS=function(t){return this.x*=t,this.y*=t,this},t.prototype.divS=function(t){if(0===t)throw new Error("Cannot divide by zero");return this.x/=t,this.y/=t,this},t.prototype.addS=function(t){return this.x+=t,this.y+=t,this},t.prototype.subS=function(t){return this.x-=t,this.y-=t,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.normalize=function(){var a=this.length();if(0===a)throw new Error("Cannot normalize zero vector");return new t(this.x/a,this.y/a)},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this},t}(),b=function(){function t(t){this.data=t}return t.prototype.det=function(){return this.data[2]*this.data[1]-this.data[0]*this.data[3]},t.prototype.mulVec=function(t){return new w(this.data[0]*t.x+this.data[2]*t.y,this.data[1]*t.x+this.data[3]*t.y)},t.prototype.mul=function(a){return this.data=t.mul(this,a).data,this},t.prototype.mulPre=function(a){return this.data=t.mul(a,this).data,this},t.prototype.transpose=function(){return this.data=t.transpose(this).data,this},t.prototype.clone=function(){return new t(this.data)},t.prototype.copy=function(t){return this.data=t.data,this},t.prototype.rotate=function(a){return this.data=t.mul(this,t.rotate(a)).data,this},t.prototype.scale=function(a,n){return this.data=t.mul(this,t.scale(a,n)).data,this},t.prototype.inv=function(){return t.inv(this)},t.identity=function(){return new t([1,0,0,1])},t.mul=function(a,n){return new t([a.data[0]*n.data[0]+a.data[1]*n.data[2],a.data[0]*n.data[1]+a.data[1]*n.data[3],a.data[2]*n.data[0]+a.data[3]*n.data[2],a.data[2]*n.data[1]+a.data[3]*n.data[3]])},t.rotate=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([n,-e,e,n])},t.scale=function(a,n){return new t([a,0,0,n])},t.transpose=function(a){return new t([a.data[0],a.data[2],a.data[1],a.data[3]])},t.inv=function(a){var n=a.det();return new t([a.data[3]/n,-a.data[1]/n,-a.data[2]/n,a.data[0]/n])},t.mulMatrixList=function(a){for(var n=t.identity(),e=0,r=a;e<r.length;e++){var i=r[e];n.mul(i)}return n},t}(),g=function(){function t(a){var n;this.data=a,null!==(n=this.data)&&void 0!==n||(this.data=t.identity().data)}return t.prototype.mul=function(a){return this.data=t.mul(this,a).data,this},t.prototype.mulVec=function(a){return t.mulVec(this,a)},t.prototype.rotateX=function(a){return this.data=t.mul(this,t.rotateX(a)).data,this},t.prototype.rotateY=function(a){return this.data=t.mul(this,t.rotateY(a)).data,this},t.prototype.rotateZ=function(a){return this.data=t.mul(this,t.rotateZ(a)).data,this},t.prototype.scale=function(a,n){return this.data=t.mul(this,t.scale(a,n)).data,this},t.prototype.translate=function(a,n){return this.data=t.mul(this,t.translate(a,n)).data,this},t.prototype.transpose=function(){return this.data=t.transpose(this).data,this},t.prototype.inv=function(){return t.inv(this)},t.prototype.det=function(){return t.det(this)},t.prototype.copy=function(t){return this.data=t.data,this},t.prototype.clone=function(){return new t(this.data)},t.identity=function(){return new t([1,0,0,0,1,0,0,0,1])},t.mul=function(a,n){return new t([a.data[0]*n.data[0]+a.data[1]*n.data[3]+a.data[2]*n.data[6],a.data[0]*n.data[1]+a.data[1]*n.data[4]+a.data[2]*n.data[7],a.data[0]*n.data[2]+a.data[1]*n.data[5]+a.data[2]*n.data[8],a.data[3]*n.data[0]+a.data[4]*n.data[3]+a.data[5]*n.data[6],a.data[3]*n.data[1]+a.data[4]*n.data[4]+a.data[5]*n.data[7],a.data[3]*n.data[2]+a.data[4]*n.data[5]+a.data[5]*n.data[8],a.data[6]*n.data[0]+a.data[7]*n.data[3]+a.data[8]*n.data[6],a.data[6]*n.data[1]+a.data[7]*n.data[4]+a.data[8]*n.data[7],a.data[6]*n.data[2]+a.data[7]*n.data[5]+a.data[8]*n.data[8]])},t.mulVec=function(t,a){return new c(t.data[0]*a.x+t.data[1]*a.y+t.data[2]*a.z,t.data[3]*a.x+t.data[4]*a.y+t.data[5]*a.z,t.data[6]*a.x+t.data[7]*a.y+t.data[8]*a.z)},t.rotateX=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([1,0,0,0,n,-e,0,e,n])},t.rotateY=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([n,0,e,0,1,0,-e,0,n])},t.rotateZ=function(a){var n=Math.cos(a),e=Math.sin(a);return new t([n,-e,0,e,n,0,0,0,1])},t.scale=function(a,n){return new t([a,0,0,0,n,0,0,0,1])},t.translate=function(a,n){return new t([1,0,a,0,1,n,0,0,1])},t.transpose=function(a){return new t([a.data[0],a.data[3],a.data[6],a.data[1],a.data[4],a.data[7],a.data[2],a.data[5],a.data[8]])},t.det=function(t){return t.data[0]*(t.data[5]*t.data[7]-t.data[4]*t.data[8])+-t.data[1]*(t.data[3]*t.data[8]-t.data[5]*t.data[6])+t.data[2]*(t.data[6]*t.data[4]-t.data[3]*t.data[7])},t.inv=function(a){var n=t.det(a);return t.transpose(new t([(a.data[7]*a.data[5]-a.data[4]*a.data[8])/n,-(a.data[6]*a.data[5]-a.data[3]*a.data[8])/n,(a.data[6]*a.data[4]-a.data[3]*a.data[7])/n,-(a.data[7]*a.data[2]-a.data[1]*a.data[8])/n,(a.data[6]*a.data[2]-a.data[0]*a.data[8])/n,-(a.data[6]*a.data[1]-a.data[0]*a.data[7])/n,(a.data[3]*a.data[1]-a.data[0]*a.data[4])/n,-(a.data[3]*a.data[2]-a.data[0]*a.data[5])/n,(a.data[3]*a.data[1]-a.data[0]*a.data[4])/n]))},t.mulMatrixList=function(a){for(var n=t.identity(),e=0,r=a;e<r.length;e++){var i=r[e];n.mul(i)}return n},t}(),x=function(){function t(t,a){this.value=t,this.type=a}return t.prototype.use=function(t){var a=h.gl,n=this.value,e=this.value;switch(this.type){case"float:1":a.uniform1f(t,e);break;case"float:2":a.uniform2f(t,n[0],n[1]);break;case"float:3":a.uniform3f(t,n[0],n[1],n[2]);break;case"float:4":a.uniform4f(t,n[0],n[1],n[2],n[3]);break;case"int:1":a.uniform1i(t,e);break;case"int:2":a.uniform2i(t,n[0],n[1]);break;case"int:3":a.uniform3i(t,n[0],n[1],n[2]);break;case"int:4":a.uniform4i(t,n[0],n[1],n[2],n[3]);break;case"vec:float:1":a.uniform1fv(t,n);break;case"vec:float:2":a.uniform2fv(t,n);break;case"vec:float:3":a.uniform3fv(t,n);break;case"vec:float:4":a.uniform4fv(t,n);break;case"vec:int:1":a.uniform1iv(t,n);break;case"vec:int:2":a.uniform2iv(t,n);break;case"vec:int:3":a.uniform3iv(t,n);break;case"vec:int:4":a.uniform4iv(t,n);break;case"mat":e instanceof b&&a.uniformMatrix2fv(t,!1,new Float32Array(e.data)),e instanceof g&&a.uniformMatrix3fv(t,!1,new Float32Array(e.data)),e instanceof d&&a.uniformMatrix4fv(t,!1,new Float32Array(e.data));break;case"int":if(e instanceof w){var r=e;a.uniform2iv(t,[r.x,r.y])}e instanceof c&&(r=e,a.uniform3iv(t,[r.x,e.y,e.z])),e instanceof u&&a.uniform4iv(t,[e.x,e.y,e.z,e.w]);break;case"float":e instanceof w&&a.uniform2fv(t,[e.x,e.y]),e instanceof c&&a.uniform3fv(t,[e.x,e.y,e.z]),e instanceof u&&a.uniform4fv(t,[e.x,e.y,e.z,e.w])}},t}(),_=function(){function t(){var t=h.gl,a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),t.bindTexture(t.TEXTURE_2D,null),this.texture=a}return t.prototype.onLoadImage=function(t){var a=h.gl;function n(t){return 0==(t&t-1)}a.bindTexture(a.TEXTURE_2D,this.texture),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,t),n(t.width)&&n(t.height)?a.generateMipmap(a.TEXTURE_2D):(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR)),a.bindTexture(a.TEXTURE_2D,null)},t.prototype.bind=function(t){var a=h.gl;a.activeTexture(a.TEXTURE0+t),h.gl.bindTexture(a.TEXTURE_2D,this.texture)},t.prototype.unBind=function(t){var a=h.gl;a.activeTexture(a.TEXTURE0+t),a.bindTexture(a.TEXTURE_2D,null)},t.prototype.destroy=function(){h.gl.deleteTexture(this.texture)},t}();function E(t){var a=h.gl;switch(t){case"float":case"float64":return a.FLOAT;case"int8":case"int16":case"int32":return a.INT;case"uint8":case"uint16":case"uint32":return a.UNSIGNED_INT}}var T,A=function(){function t(t,a){var n=h.gl.createVertexArray();this.buffers=t,this.vao=n,this.elementBuffer=a}return t.prototype.bindElementBuffer=function(){this.elementBuffer&&this.elementBuffer.bind()},t.prototype.bindBuffers=function(t){var a=this;Object.keys(this.buffers).forEach((function(n){var e,r,i,o,s,u,d=h.gl.getAttribLocation(t.program,n),c=a.buffers[n];c.buffer.bind(),a.enablePointer(d,{size:c.buffer.size,type:E(c.buffer.type),normalized:null!==(r=null===(e=c.options)||void 0===e?void 0:e.normalized)&&void 0!==r&&r,offset:null!==(o=null===(i=c.options)||void 0===i?void 0:i.offset)&&void 0!==o?o:0,stride:null!==(u=null===(s=c.options)||void 0===s?void 0:s.stride)&&void 0!==u?u:0})}))},t.prototype.bind=function(){h.gl.bindVertexArray(this.vao),this.bindElementBuffer(),this.bindBuffers(v.currentProgram)},t.prototype.unBind=function(){h.gl.bindVertexArray(null)},t.prototype.enablePointer=function(t,a){var n=h.gl;n.enableVertexAttribArray(t),n.vertexAttribPointer(t,a.size,a.type,a.normalized,a.stride,a.offset)},t.prototype.draw=function(t){var a,n,e,r;void 0===t&&(t={});var i=h.gl;if(this.elementBuffer)i.drawElements(null!==(a=t.mode)&&void 0!==a?a:i.TRIANGLES,this.elementBuffer.data.length,i.UNSIGNED_SHORT,null!==(n=t.offset)&&void 0!==n?n:0);else{var o=Object.values(this.buffers)[0].buffer,s=o.data.length/o.size;i.drawArrays(null!==(e=t.mode)&&void 0!==e?e:i.TRIANGLES,null!==(r=t.first)&&void 0!==r?r:0,s)}},t.fromData=function(a){var n={};Object.keys(a.attributes).forEach((function(t){var e=a.attributes[t];n[t]={buffer:new p(e.buffer),options:e.options}}));var e=void 0;return a.indices&&(e=y.fromJson(a.indices)),new t(n,e)},t}(),z=function(){function t(t,a,n,e){void 0===n&&(n={}),void 0===e&&(e=[]),this.program=t,this.vertexArray=a,this.uniforms=n,this.textures=e}return t.prototype.render=function(){var t=h.gl;t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.enable(t.DEPTH_TEST),t.enable(t.CULL_FACE),this.program.use(),this.vertexArray.bind(),this.textures.forEach((function(t,a){t.bind(a)})),this.program.useUniforms(this.uniforms),this.vertexArray.draw(),this.textures.forEach((function(t,a){t.unBind(a)})),this.vertexArray.unBind(),this.program.unUse()},t}(),R=function(){function t(){this.attributes={},this.group=[]}return t.prototype.setAttribute=function(t,a){this.attributes[t]=a},t.prototype.setIdx=function(t){this.indices=t},t.prototype.addGroup=function(t,a,n){this.group.push({start:t,count:a,materialIndex:n})},t.prototype.clearGroups=function(){this.group=[]},t}(),L=function(){var t=function(a,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,a){t.__proto__=a}||function(t,a){for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])},t(a,n)};return function(a,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=a}t(a,n),a.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}}(),P=function(t){function a(a,n,e,r,i,o){void 0===a&&(a=1),void 0===n&&(n=1),void 0===e&&(e=1),void 0===r&&(r=1),void 0===i&&(i=1),void 0===o&&(o=1);var s=t.call(this)||this,u=[],d=[],f=[],l=[],h=0,p=0,y=0,v=s;function m(t,a,n,e,r,i,o,s,m,w,b){for(var g=new c(0,0,0),x=i/m,_=o/w,E=0,T=0;T<=m;T++)for(var A=T*_-o/2,z=0;z<=w;z++){var R=z*x-i/2;g[t]=R*e,g[a]=A*r,g[n]=s/2,u.push(g.x,g.y,g.z),g[t]=0,g[a]=0,g[n]=s>0?1:-1,d.push(g.x,g.y,g.z),f.push(T/m,1-z/w),E+=1}for(T=0;T<w;T++)for(z=0;z<m;z++){var L=y+T+(m+1)*T,P=y+T+(m+1)*(T+1),U=y+(T+1)+(m+1)*(T+1),B=y+(T+1)+(m+1)*T;l.push(L,P,B),l.push(P,U,B),h+=6}v.addGroup(p,h,b),p+=h,y+=E}return m("z","y","x",-1,-1,e,n,a,o,i,0),m("z","y","x",1,-1,e,n,-a,o,i,1),m("x","z","y",1,1,a,e,n,r,o,2),m("x","z","y",1,-1,a,e,-n,r,o,3),m("x","y","z",1,-1,a,n,e,r,i,4),m("x","y","z",-1,-1,a,n,-e,r,i,5),s.setIdx({data:l}),s.setAttribute("position",{buffer:{data:u,type:"float",size:3}}),s.setAttribute("normal",{buffer:{data:d,type:"float",size:3}}),s.setAttribute("uv",{buffer:{data:f,type:"float",size:2}}),s}return L(a,t),a}(R);(function t(a,n,e){if("string"==typeof a)return a.startsWith("class:")?function(t){for(var a=document.getElementsByClassName(t),n=[],e=0;e<a.length;e++){var r=a[e];n.push(new f(r))}return n}(a.replace("class:","")):function(a,n){var e=document.getElementById(a);return n?t(n,void 0,e):new f(e)}(a.replace("id:",""),n);if(a instanceof HTMLElement)return t(n,void 0,a);var r=null!=e?e:document.createElement(a.tag||"div");!function(t,a){t.className&&(a.className=t.className)}(a,r),function(t,a){t.id&&(a.id=t.id)}(a,r),function(t,a){null!=t.events&&Object.keys(t.events).forEach((function(n){var e=t.events[n];a.addEventListener(n,e)}))}(a,r),function(t,a){t.attributes&&Object.keys(t.attributes).forEach((function(n){a.setAttribute(n,t.attributes[n])}))}(a,r),function(t,a){t.styles&&Object.keys(t.styles).forEach((function(n){a.style.setProperty(n.replace("$$","-"),t.styles[n])}))}(a,r),function(t,a){t.innerHTML&&(a.innerHTML=t.innerHTML)}(a,r);var i=function(a,n){if(a.childs){var e=[];return a.childs.forEach((function(a){if(a instanceof HTMLElement)return n.appendChild(a),void e.push(new f(a));if("string"!=typeof a){if(a instanceof f)n.appendChild(a.element);else if("object"==typeof a){var r=t(a);return e.push(r),void n.appendChild(r.element)}}else n.innerHTML+=a})),e}}(a,r),o=new f(r,l(l({},a),{childs:i}));return a.ref&&a.ref(o),o})("id:root",{styles:{padding:0,margin:0,width:"100vw",height:"100vh",display:"flex"},childs:[{tag:"canvas",ref:function(t){T=t}}]}),h.init(T.element);var U=new m("default","vertex","#version 300 es\n  layout(location = 0) in vec4 position;\n  layout(location = 1) in vec2 uv;\n  layout(location = 2) in vec3 normal;\n\n\n  out vec2 v_texcoord;\n  out vec3 v_normal;\n  out vec3 v_surfaceToLight;\n  out vec3 v_surfaceToView;\n\n  uniform mat4 u_projection;\n  uniform mat4 u_model;\n  uniform mat4 u_worldInverseTranspose;\n  uniform vec3 u_lightWorldPosition;\n  uniform vec3 u_viewWorldPosition;\n  uniform mat4 u_world;\n  uniform mat4 u_view;\n\n  void main(){\n    gl_Position = u_projection * u_view * u_world * u_model * position;\n\n\n    v_normal = mat3(u_worldInverseTranspose) * mat3(u_model) * normal;\n\n    vec3 surfaceWorldPosition = (u_world * u_model * position).xyz;\n\n    v_surfaceToLight = u_lightWorldPosition - surfaceWorldPosition;\n    v_surfaceToView = u_viewWorldPosition - surfaceWorldPosition;\n\n    v_texcoord = uv;\n  }\n"),B=new m("default","fragment","#version 300 es\n  precision highp float;\n  \n  in vec2 v_texcoord;\n  in vec3 v_normal;\n  in vec3 v_surfaceToLight;\n  in vec3 v_surfaceToView;\n\n\n  out vec4 outColor;\n  uniform sampler2D u_texture;\n  uniform vec3 u_lightColor;\n  uniform vec3 u_specularColor;\n  uniform float u_shininess;\n  \n  void main(){\n\n    vec3 normal = normalize(v_normal);\n\n    vec3 surfaceToLightDirection = normalize(v_surfaceToLight);\n    vec3 surfaceToViewDirection = normalize(v_surfaceToView);\n    vec3 halfVector = normalize(surfaceToLightDirection + surfaceToViewDirection);\n\n\n    float light = dot(surfaceToLightDirection, normal);\n    //float specular = dot(normal,halfVector);\n\n\n    outColor = texture(u_texture, v_texcoord);\n\n\n    float specular = 0.0;\n    if (light > 0.0) {\n      specular = pow(dot(normal, halfVector), u_shininess);\n    }\n\n    outColor.rgb *= light * u_lightColor;\n    outColor.rgb += specular * u_specularColor;\n\n\n  }\n");h.gl.canvas.width=innerWidth,h.gl.canvas.height=innerHeight;var S=new v("default",U,B);s.addAsset({name:"pokemon",url:"./assets/pokemon.png"}),s.addAsset({name:"digimon",url:"./assets/digimon.jpg"});var M=new P,k=A.fromData({attributes:M.attributes,indices:M.indices});console.log(M);var D=d.perspective(h.gl.canvas.width/h.gl.canvas.height,Math.PI/4,1,100),I=0;function O(){var t={u_projection:new x(D,"mat"),u_model:new x(d.scale(10,10,10).rotateY(Math.PI/180*I),"mat"),u_view:new x(d.translate(0,-10,-100),"mat"),u_worldInverseTranspose:new x(d.identity(),"mat"),u_lightWorldPosition:new x(new c(0,0,8),"float"),u_world:new x(d.identity(),"mat"),u_viewWorldPosition:new x(new c(0,10,100),"float"),u_shininess:new x(100,"float:1"),u_lightColor:new x(new c(1,1,1),"float"),u_specularColor:new x(new c(1,1,1),"float")},a=new _;a.onLoadImage(s.getLoadedAsset("image:digimon").data),new z(S,k,t,[a]).render(),I+=1,requestAnimationFrame(O)}s.loadAssets().then((function(){O()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,